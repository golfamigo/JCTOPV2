openapi: 3.0.0
info:
  title: JCTOP Event Management API
  description: API documentation for JCTOP Event Management System
  version: 1.0.0
  contact:
    name: JCTOP Support
    email: support@jctop.com
servers:
  - url: http://localhost:3001/api/v1
    description: Local development server
  - url: https://jctop.zeabur.app/api/v1
    description: Production server

tags:
  - name: Auth
    description: Authentication endpoints
  - name: Events
    description: Event management
  - name: Users
    description: User management
  - name: Tickets
    description: Ticket operations
  - name: Registrations
    description: Event registrations
  - name: Organizer
    description: Organizer operations
  - name: Admin
    description: Admin operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
        googleId:
          type: string
          nullable: true
        authProvider:
          type: string
          enum: [email, google]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organizerId:
          type: string
          format: uuid
        categoryId:
          type: string
          nullable: true
        venueId:
          type: string
          nullable: true
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        location:
          type: string
        imageUrl:
          type: string
          nullable: true
        status:
          type: string
          enum: [draft, published, unpublished, paused, ended]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/Category'
        venue:
          $ref: '#/components/schemas/Venue'
        ticketTypes:
          type: array
          items:
            $ref: '#/components/schemas/TicketType'

    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    Venue:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        capacity:
          type: integer
        location:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number

    TicketType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          type: number
        quantity:
          type: integer
        available:
          type: integer
        isEarlyBird:
          type: boolean
        earlyBirdPrice:
          type: number
          nullable: true
        earlyBirdEndDate:
          type: string
          format: date-time
          nullable: true
        minPurchase:
          type: integer
        maxPurchase:
          type: integer
        status:
          type: string
          enum: [active, inactive, soldOut]

    Registration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        ticketTypeId:
          type: string
          format: uuid
        quantity:
          type: integer
        totalAmount:
          type: number
        status:
          type: string
          enum: [pending, paid, cancelled, refunded]
        paymentMethod:
          type: string
        paymentId:
          type: string
          nullable: true
        checkInAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        name:
          type: string
          minLength: 2

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string

    CreateEventRequest:
      type: object
      required:
        - title
        - description
        - startDate
        - endDate
        - location
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 50
          maxLength: 2000
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        location:
          type: string
        imageUrl:
          type: string
        categoryId:
          type: string
        venueId:
          type: string
        status:
          type: string
          enum: [draft, published]

    PaginatedEventsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        pagination:
          type: object
          properties:
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
            totalPages:
              type: integer

    Error:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        error:
          type: string

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists

  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
        '400':
          description: Bad request

  /auth/profile:
    get:
      tags:
        - Auth
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized

  /events:
    get:
      tags:
        - Events
      summary: Get public events
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 12
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [draft, published, unpublished, paused, ended]
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventsResponse'

    post:
      tags:
        - Events
      summary: Create new event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
        '400':
          description: Bad request

  /events/{id}:
    get:
      tags:
        - Events
      summary: Get event by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found

    put:
      tags:
        - Events
      summary: Update event
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Event not found

    delete:
      tags:
        - Events
      summary: Delete event
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Event deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Event not found

  /events/{id}/tickets:
    get:
      tags:
        - Tickets
      summary: Get tickets for an event
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of ticket types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketType'
        '404':
          description: Event not found

    post:
      tags:
        - Tickets
      summary: Create ticket type for event
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - quantity
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                quantity:
                  type: integer
                isEarlyBird:
                  type: boolean
                earlyBirdPrice:
                  type: number
                earlyBirdEndDate:
                  type: string
                  format: date-time
                minPurchase:
                  type: integer
                  default: 1
                maxPurchase:
                  type: integer
                  default: 10
      responses:
        '201':
          description: Ticket type created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketType'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /registrations:
    get:
      tags:
        - Registrations
      summary: Get user's registrations
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, paid, cancelled, refunded]
      responses:
        '200':
          description: List of registrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Registration'
        '401':
          description: Unauthorized

    post:
      tags:
        - Registrations
      summary: Create registration
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventId
                - ticketTypeId
                - quantity
              properties:
                eventId:
                  type: string
                  format: uuid
                ticketTypeId:
                  type: string
                  format: uuid
                quantity:
                  type: integer
                  minimum: 1
                discountCode:
                  type: string
      responses:
        '201':
          description: Registration created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /registrations/{id}/payment:
    post:
      tags:
        - Registrations
      summary: Process payment for registration
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - paymentMethod
              properties:
                paymentMethod:
                  type: string
                  enum: [creditCard, linePay, applePay, googlePay, bankTransfer]
                cardDetails:
                  type: object
                  properties:
                    number:
                      type: string
                    expiryMonth:
                      type: string
                    expiryYear:
                      type: string
                    cvv:
                      type: string
                    holderName:
                      type: string
      responses:
        '200':
          description: Payment processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentId:
                    type: string
                  status:
                    type: string
                  paymentUrl:
                    type: string
                    nullable: true
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Registration not found

  /registrations/{id}/check-in:
    post:
      tags:
        - Registrations
      summary: Check-in for event
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Check-in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  checkInAt:
                    type: string
                    format: date-time
        '400':
          description: Already checked in
        '401':
          description: Unauthorized
        '404':
          description: Registration not found

  /organizer/events:
    get:
      tags:
        - Organizer
      summary: Get organizer's events
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: status
          schema:
            type: string
      responses:
        '200':
          description: List of organizer's events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventsResponse'
        '401':
          description: Unauthorized

  /organizer/events/{id}/attendees:
    get:
      tags:
        - Organizer
      summary: Get event attendees
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: checkedIn
          schema:
            type: boolean
      responses:
        '200':
          description: List of attendees
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    registrationId:
                      type: string
                    user:
                      $ref: '#/components/schemas/User'
                    ticketType:
                      type: string
                    quantity:
                      type: integer
                    checkInAt:
                      type: string
                      format: date-time
                      nullable: true
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Event not found

  /organizer/events/{id}/analytics:
    get:
      tags:
        - Organizer
      summary: Get event analytics
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Event analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalRegistrations:
                    type: integer
                  totalRevenue:
                    type: number
                  totalCheckIns:
                    type: integer
                  attendanceRate:
                    type: number
                  ticketsSold:
                    type: object
                    additionalProperties:
                      type: integer
                  revenueByTicketType:
                    type: object
                    additionalProperties:
                      type: number
                  registrationTrend:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                        count:
                          type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Event not found

  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [active, suspended, deleted]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (not admin)

  /admin/users/{id}/suspend:
    post:
      tags:
        - Admin
      summary: Suspend user (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: User suspended
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found

  /admin/events/{id}/unpublish:
    post:
      tags:
        - Admin
      summary: Unpublish event (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: Event unpublished
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Event not found

  /health:
    get:
      tags:
        - System
      summary: Health check
      responses:
        '200':
          description: System healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
                  database:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [connected, disconnected]
                  timestamp:
                    type: string
                    format: date-time